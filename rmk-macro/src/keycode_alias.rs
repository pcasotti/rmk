use std::collections::HashMap;

use once_cell::sync::Lazy;

pub(crate) static KEYCODE_ALIAS: Lazy<HashMap<&str, &str>> = Lazy::new(|| {
    let mut m = HashMap::new();
    m.insert("no", "No");
    m.insert("a", "A");
    m.insert("b", "B");
    m.insert("c", "C");
    m.insert("d", "D");
    m.insert("e", "E");
    m.insert("f", "F");
    m.insert("g", "G");
    m.insert("h", "H");
    m.insert("i", "I");
    m.insert("j", "J");
    m.insert("k", "K");
    m.insert("l", "L");
    m.insert("m", "M");
    m.insert("n", "N");
    m.insert("o", "O");
    m.insert("p", "P");
    m.insert("q", "Q");
    m.insert("r", "R");
    m.insert("s", "S");
    m.insert("t", "T");
    m.insert("u", "U");
    m.insert("v", "V");
    m.insert("w", "W");
    m.insert("x", "X");
    m.insert("y", "Y");
    m.insert("z", "Z");
    m.insert("kc1", "Kc1");
    m.insert("kc2", "Kc2");
    m.insert("kc3", "Kc3");
    m.insert("kc4", "Kc4");
    m.insert("kc5", "Kc5");
    m.insert("kc6", "Kc6");
    m.insert("kc7", "Kc7");
    m.insert("kc8", "Kc8");
    m.insert("kc9", "Kc9");
    m.insert("kc0", "Kc0");
    m.insert("1", "Kc1");
    m.insert("2", "Kc2");
    m.insert("3", "Kc3");
    m.insert("4", "Kc4");
    m.insert("5", "Kc5");
    m.insert("6", "Kc6");
    m.insert("7", "Kc7");
    m.insert("8", "Kc8");
    m.insert("9", "Kc9");
    m.insert("0", "Kc0");
    m.insert("enter", "Enter");
    m.insert("ent", "Enter");
    m.insert("return", "Enter");
    m.insert("escape", "Escape");
    m.insert("esc", "Escape");
    m.insert("backspace", "Backspace");
    m.insert("bs", "Backspace");
    m.insert("tab", "Tab");
    m.insert("space", "Space");
    m.insert(" ", "Space");
    m.insert("minus", "Minus");
    m.insert("-", "Minus");
    m.insert("equal", "Equal");
    m.insert("=", "Equal");
    m.insert("leftbracket", "LeftBracket");
    m.insert("[", "LeftBracket");
    m.insert("]", "RightBracket");
    m.insert("backslash", "Backslash");
    m.insert("\\", "Backslash");
    m.insert("nonushash", "NonusHash");
    m.insert("#", "NonusHash");
    m.insert("semicolon", "Semicolon");
    m.insert(";", "Semicolon");
    m.insert("quote", "Quote");
    m.insert("'", "Quote");
    m.insert("grave", "Grave");
    m.insert("`", "Grave");
    m.insert("comma", "Comma");
    m.insert(",", "Comma");
    m.insert("dot", "Dot");
    m.insert(".", "Dot");
    m.insert("slash", "Slash");
    m.insert("/", "Slash");
    m.insert("capslock", "CapsLock");
    m.insert("caps", "CapsLock");
    m.insert("f1", "F1");
    m.insert("f2", "F2");
    m.insert("f3", "F3");
    m.insert("f4", "F4");
    m.insert("f5", "F5");
    m.insert("f6", "F6");
    m.insert("f7", "F7");
    m.insert("f8", "F8");
    m.insert("f9", "F9");
    m.insert("f10", "F10");
    m.insert("f11", "F11");
    m.insert("f12", "F12");
    m.insert("printscreen", "PrintScreen");
    m.insert("print_screen", "PrintScreen");
    m.insert("pscr", "PrintScreen");
    m.insert("scrolllock", "ScrollLock");
    m.insert("scroll", "ScrollLock");
    m.insert("pause", "Pause");
    m.insert("insert", "Insert");
    m.insert("ins", "Insert");
    m.insert("home", "Home");
    m.insert("end", "End");
    m.insert("pageup", "PageUp");
    m.insert("pgup", "PageUp");
    m.insert("pagedown", "PageDown");
    m.insert("pgdn", "PageDown");
    m.insert("delete", "Delete");
    m.insert("right", "Right");
    m.insert("->", "Right");
    m.insert("→", "Right");
    m.insert("left", "Left");
    m.insert("<-", "Left");
    m.insert("←", "Left");
    m.insert("down", "Down");
    m.insert("↓", "Down");
    m.insert("up", "Up");
    m.insert("↑", "Up");
    m.insert("numlock", "NumLock");
    m.insert("numslock", "NumLock");
    m.insert("kp_slash", "KpSlash");
    m.insert("kpslash", "KpSlash");
    m.insert("kp_asterisk", "KpAsterisk");
    m.insert("kpasterisk", "KpAsterisk");
    m.insert("kp_minus", "KpMinus");
    m.insert("kpminus", "KpMinus");
    m.insert("kp_plus", "KpPlus");
    m.insert("kpplus", "KpPlus");
    m.insert("kp_enter", "KpEnter");
    m.insert("kpenter", "KpEnter");
    m.insert("kp_decimal", "KpDecimal");
    m.insert("kpdecimal", "KpDecimal");
    m.insert("kp_0", "Kp0");
    m.insert("kp0", "Kp0");
    m.insert("kp_1", "Kp1");
    m.insert("kp1", "Kp1");
    m.insert("kp_2", "Kp2");
    m.insert("kp2", "Kp2");
    m.insert("kp_3", "Kp3");
    m.insert("kp3", "Kp3");
    m.insert("kp_4", "Kp4");
    m.insert("kp4", "Kp4");
    m.insert("kp_5", "Kp5");
    m.insert("kp5", "Kp5");
    m.insert("kp_6", "Kp6");
    m.insert("kp6", "Kp6");
    m.insert("kp_7", "Kp7");
    m.insert("kp7", "Kp7");
    m.insert("kp_8", "Kp8");
    m.insert("kp8", "Kp8");
    m.insert("kp_9", "Kp9");
    m.insert("kp9", "Kp9");
    m.insert("kp_0", "Kp0");
    m.insert("kp0", "Kp0");
    m.insert("kp_dot", "KpDot");
    m.insert("kpdot", "KpDot");
    m.insert("kp_equal", "KpEqual");
    m.insert("kpequal", "KpEqual");
    m.insert("nonusbackslash", "NonusBackslash");
    m.insert("application", "Application");
    m.insert("kbpower", "KbPower");
    m.insert("kbpower", "KbPower");
    m.insert("kpequal", "KpEqual");
    m.insert("kp_equal", "KpEqual");
    m.insert("f13", "F13");
    m.insert("f14", "F14");
    m.insert("f15", "F15");
    m.insert("f16", "F16");
    m.insert("f17", "F17");
    m.insert("f18", "F18");
    m.insert("f19", "F19");
    m.insert("f20", "F20");
    m.insert("f21", "F21");
    m.insert("f22", "F22");
    m.insert("f23", "F23");
    m.insert("f24", "F24");
    m.insert("execute", "Execute");
    m.insert("help", "Help");
    m.insert("menu", "Menu");
    m.insert("select", "Select");
    m.insert("stop", "Stop");
    m.insert("again", "Again");
    m.insert("undo", "Undo");
    m.insert("cut", "Cut");
    m.insert("copy", "Copy");
    m.insert("paste", "Paste");
    m.insert("find", "Find");
    m.insert("kbmute", "KbMute");
    m.insert("mute", "KbMute");
    m.insert("kbvolumeup", "KbVolumeUp");
    m.insert("volumeup", "KbVolumeUp");
    m.insert("volup", "KbVolumeUp");
    m.insert("kbvolumedown", "KbVolumeDown");
    m.insert("volumedown", "KbVolumeDown");
    m.insert("voldown", "KbVolumeDown");
    m.insert("lockcapslock", "LockingCapsLock");
    m.insert("locknumlock", "LockingNumLock");
    m.insert("lockscrolllock", "LockingScrollLock");
    m.insert("kpcomma", "KpComma");
    m.insert("kp_comma", "KpComma");
    m.insert("kpequalas400", "KpEqualAs400");
    m.insert("international1", "International1");
    m.insert("international2", "International2");
    m.insert("international3", "International3");
    m.insert("international4", "International4");
    m.insert("international5", "International5");
    m.insert("international6", "International6");
    m.insert("international7", "International7");
    m.insert("international8", "International8");
    m.insert("international9", "International9");
    m.insert("language1", "Language1");
    m.insert("language2", "Language2");
    m.insert("language3", "Language3");
    m.insert("language4", "Language4");
    m.insert("language5", "Language5");
    m.insert("language6", "Language6");
    m.insert("language7", "Language7");
    m.insert("language8", "Language8");
    m.insert("language9", "Language9");
    m.insert("alternateerase", "AlternateErase");
    m.insert("alternate_erase", "AlternateErase");
    m.insert("systemrequest", "SystemRequest");
    m.insert("system_request", "SystemRequest");
    m.insert("cancel", "Cancel");
    m.insert("clear", "Clear");
    m.insert("prior", "Prior");
    m.insert("return", "Return");
    m.insert("separator", "Separator");
    m.insert("out", "Out");
    m.insert("oper", "Oper");
    m.insert("clearagain", "ClearAgain");
    m.insert("clear_again", "ClearAgain");
    m.insert("crsel", "Crsel");
    m.insert("exsel", "Exsel");
    m.insert("systempower", "SystemPower");
    m.insert("system_power", "SystemPower");
    m.insert("systemsleep", "SystemSleep");
    m.insert("system_sleep", "SystemSleep");
    m.insert("systemwake", "SystemWake");
    m.insert("system_wake", "SystemWake");
    m.insert("audiomute", "AudioMute");
    m.insert("audio_mute", "AudioMute");
    m.insert("audiovolup", "AudioVolUp");
    m.insert("audio_volup", "AudioVolUp");
    m.insert("audiovoldown", "AudioVolDown");
    m.insert("audio_voldown", "AudioVolDown");
    m.insert("mediaplaypause", "MediaPlayPause");
    m.insert("mediaplay_pause", "MediaPlayPause");
    m.insert("mediaselect", "MediaSelect");
    m.insert("media_select", "MediaSelect");
    m.insert("mediaeject", "MediaEject");
    m.insert("media_eject", "MediaEject");
    m.insert("mail", "Mail");
    m.insert("calculator", "Calculator");
    m.insert("mycomputer", "MyComputer");
    m.insert("wwwsearch", "WwwSearch");
    m.insert("www_search", "WwwSearch");
    m.insert("wwwhome", "WwwHome");
    m.insert("www_home", "WwwHome");
    m.insert("wwwback", "WwwBack");
    m.insert("www_back", "WwwBack");
    m.insert("wwwforward", "WwwForward");
    m.insert("www_forward", "WwwForward");
    m.insert("wwwstop", "WwwStop");
    m.insert("www_stop", "WwwStop");
    m.insert("wwwrefresh", "WwwRefresh");
    m.insert("www_refresh", "WwwRefresh");
    m.insert("wwwfavorites", "WwwFavorites");
    m.insert("www_favorites", "WwwFavorites");
    m.insert("mediafastforward", "MediaFastForward");
    m.insert("media_fastforward", "MediaFastForward");
    m.insert("mediarewind", "MediaRewind");
    m.insert("media_rewind", "MediaRewind");
    m.insert("brightnessup", "BrightnessUp");
    m.insert("brightness_up", "BrightnessUp");
    m.insert("brightnessdown", "BrightnessDown");
    m.insert("brightness_down", "BrightnessDown");
    m.insert("controlpanel", "ControlPanel");
    m.insert("control_panel", "ControlPanel");
    m.insert("assistant", "Assistant");
    m.insert("missioncontrol", "MissionControl");
    m.insert("mission_control", "MissionControl");
    m.insert("launchpad", "Launchpad");
    m.insert("mouseup", "MouseUp");
    m.insert("mouse_up", "MouseUp");
    m.insert("mousedown", "MouseDown");
    m.insert("mouse_down", "MouseDown");
    m.insert("mouseleft", "MouseLeft");
    m.insert("mouse_left", "MouseLeft");
    m.insert("mouseright", "MouseRight");
    m.insert("mouse_right", "MouseRight");
    m.insert("mousebtn1", "MouseBtn1");
    m.insert("mousebtn2", "MouseBtn2");
    m.insert("mousebtn3", "MouseBtn3");
    m.insert("mousebtn4", "MouseBtn4");
    m.insert("mousebtn5", "MouseBtn5");
    m.insert("mousebtn6", "MouseBtn6");
    m.insert("mousebtn7", "MouseBtn7");
    m.insert("mousebtn8", "MouseBtn8");
    m.insert("mousewheelup", "MouseWheelUp");
    m.insert("mouse_wheelup", "MouseWheelUp");
    m.insert("mousewheeldown", "MouseWheelDown");
    m.insert("mouse_wheeldown", "MouseWheelDown");
    m.insert("mousewheelleft", "MouseWheelLeft");
    m.insert("mouse_wheelleft", "MouseWheelLeft");
    m.insert("mousewheelright", "MouseWheelRight");
    m.insert("mouse_wheelright", "MouseWheelRight");
    m.insert("mouseaccel0", "MouseAccel0");
    m.insert("mouse_accel0", "MouseAccel0");
    m.insert("mouseaccel1", "MouseAccel1");
    m.insert("mouse_accel1", "MouseAccel1");
    m.insert("mouseaccel2", "MouseAccel2");
    m.insert("mouse_accel2", "MouseAccel2");
    m.insert("lctrl", "LCtrl");
    m.insert("leftctrl", "LCtrl");
    m.insert("left_ctrl", "LCtrl");
    m.insert("lshift", "LShift");
    m.insert("leftshift", "LShift");
    m.insert("left_shift", "LShift");
    m.insert("lalt", "LAlt");
    m.insert("leftalt", "LAlt");
    m.insert("left_alt", "LAlt");
    m.insert("lgui", "LGui");
    m.insert("leftgui", "LGui");
    m.insert("left_gui", "LGui");
    m.insert("rctrl", "RCtrl");
    m.insert("rightctrl", "RCtrl");
    m.insert("right_ctrl", "RCtrl");
    m.insert("rshift", "RShift");
    m.insert("rightshift", "RShift");
    m.insert("right_shift", "RShift");
    m.insert("ralt", "RAlt");
    m.insert("rightalt", "RAlt");
    m.insert("right_alt", "RAlt");
    m.insert("rgui", "RGui");
    m.insert("rightgui", "RGui");
    m.insert("right_gui", "RGui");
    m
});
